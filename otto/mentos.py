# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mentos.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyautogui
import time
import re
from PyQt5.QtWidgets import QMainWindow, QApplication, QPlainTextEdit, QPushButton
from PyQt5 import uic
import io
import keyboard


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(180, 20, 451, 301))
        self.plainTextEdit.setPlainText("")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(340, 380, 111, 41))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Mentos!"))
        
        
class Main(QMainWindow, Ui_MainWindow):
    
    def __init__(self, parent=None):
        
        super().__init__(parent)
        self.setupUi(self)
        self.x=0
        
        
        # Connect the clicked signal of the push button to a new method
        self.pushButton.clicked.connect(self.start_autotyping)
        print("connected")

    def start_autotyping(self):     
        print("lol")
        # Get the text from the plain text edit
        text = self.plainTextEdit.toPlainText()
        print(text)
        
        self.spaces = 0 
        
        delay_speed = 0

        def tabbing_mech(line):
            
            
            count_space = 0
            
            
            if self.x==1:
                pyautogui.press('tab')
                print("xxxxxxxxxxxxx")
            for char in line:
                if char == " ":
                    count_space += 1
                elif char == "\t":
                    count_space += 4
                else:
                    break
            print(count_space, self.spaces, line)
            
            
            if self.spaces > count_space:
                back_tab = (self.spaces - count_space) // 4 
                self.spaces = count_space
                print("tab back")
                for i in range(back_tab):
                    pyautogui.keyDown('shift')
                    pyautogui.press('tab')
                    pyautogui.keyUp('shift')
                return line.lstrip()
            elif count_space == 0:
                return line
            elif self.spaces == count_space:
                return line.lstrip()
            elif self.spaces < count_space:
                print("indenting")
                self.spaces = count_space
                return line.lstrip()

        
        
            

        def start_autotyper():
            with io.StringIO(text) as f:
                for lines in f:  
                    if not lines.strip():
                        print("empty line")
                        continue
                    else:
                        lines = re.sub(r'#.*', '', lines)
                        if not lines.strip():
                            print("empty line")
                            continue 
                        type_me = tabbing_mech(lines) #Used for IDEs
                        pyautogui.typewrite(type_me, delay_speed)
                        lines1=lines.rstrip()+'\n'
                        if 'break' in lines1 or 'return\n' in lines1:
                            self.x=1
                        else:
                            self.x=0
        keyboard.add_hotkey('escape', start_autotyper)

        # Keep the script running
        keyboard.wait()

 
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    m = Main()
    m.show()
    sys.exit(app.exec_())
